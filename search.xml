<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BeanUtils工具类注入方法</title>
      <link href="/2020/04/16/BeanUtils%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95/"/>
      <url>/2020/04/16/BeanUtils%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<font size=4><h2 id="数据的封装和抽取—BeanUtils-工具类"><a href="#数据的封装和抽取—BeanUtils-工具类" class="headerlink" title="数据的封装和抽取—BeanUtils 工具类"></a>数据的封装和抽取—BeanUtils 工具类</h2><p>BeanUtils 工具类，它可以一次性的把所有请求的参数注入到 JavaBean 中。</p><p>需要导入两个包：</p><p>commons-beanutils.jar 以及 commons-logging.jar</p><p>它会根据已有的类，搜索属性对应的 set 方法，来进行对实例该属性的设置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanUtils.populate(bean,map); &#x2F;&#x2F;将 map 中的键值依次注入到 bean 类的属性中</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebUtils</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">copyParamToBean</span><span class="params">(Map map, T bean)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(bean,map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传与下载</title>
      <link href="/2020/04/15/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/04/15/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<font size=4 face="微软雅黑"><h2 id="文件的上传与下载简介"><a href="#文件的上传与下载简介" class="headerlink" title="文件的上传与下载简介"></a>文件的上传与下载简介</h2><p>1、要有一个 $form$ 标签，且是 $post$ 请求。</p><p>2、$form$ 标签的 $encType$ 属性必须为 $multipart/form-data$ 值。</p><p> 3、在 $form$ 标签中使用 $input type=file$ 添加上传的文件。</p><p>4、编写服务器代码接收，处理上传的数据。</p><p>encType = multipart/form-data ：表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼接，然后以二进制流的形式发送给服务器。</p><p><img src="../../../../img/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/3.png" alt=""></p><h2 id="上传所用到的类的方法"><a href="#上传所用到的类的方法" class="headerlink" title="上传所用到的类的方法"></a>上传所用到的类的方法</h2><p>需要导入 commons-fileupload.jar 以及 commons-io.jar 。</p><p>$ServletFileUpload$ 类，用于解析上传的数据。</p><p>$FileItem$ 类，表示每一个表单项（普通表单项以及文件项）</p><p>$boolean ServletFileUpload.isMultipartContent(HttpServletRequest request) $</p><p>判断当前请求的数据格式是否是多段格式</p><p>$ public List$ $&lt;$ $FileItem$ $&gt;$  $pareRequest(HttpServletRequest request) $</p><p>解析上传的数据</p><p>$boolean FileItem.isFormField()$</p><p>判断当前这个表单项，是否是普通的表单项，还是文件表单项。</p><p>$true$ 表示普通表单项，$false$ 表示文件表单项。</p><p>$String FileItem.getFieldName()$</p><p>获取表单项的 $name$ 属性值</p><p>$String FileItem.getString()$</p><p>获取当前表单项的值</p><p>$String FileItem.getName()$</p><p>获取上传的文件名</p><p>$void FileItem.write(file)$</p><p>将上传的文件写到参数 file 所指向的磁盘位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ServletFileUpload.isMultipartContent(req))&#123;</span><br><span class="line">            req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="comment">//创建 FileItemFactory 工厂实现类</span></span><br><span class="line">            DiskFileItemFactory diskFileItemFactory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建解析文件上传的工具类 ServletFileUpload 类</span></span><br><span class="line">            ServletFileUpload fileUpload = <span class="keyword">new</span> ServletFileUpload(diskFileItemFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到每一个表单项</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;FileItem&gt; list = fileUpload.parseRequest(req);</span><br><span class="line">                <span class="keyword">for</span>(FileItem x : list)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(x.isFormField())&#123;</span><br><span class="line">                        System.out.print(<span class="string">"表单项 name 值："</span> + x.getFieldName());</span><br><span class="line">                        System.out.println(<span class="string">"  表单项的值为："</span> + x.getString(<span class="string">"UTF-8"</span>));</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"表单项 name 值 ："</span> + x.getFieldName());</span><br><span class="line">                        System.out.println(<span class="string">"上传的文件名："</span> + x.getName());</span><br><span class="line">                        x.write(<span class="keyword">new</span> File(<span class="string">"G:\\"</span> + x.getName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p><img src="../../../../img/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/4.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取需要下载的文件名</span></span><br><span class="line">        String name = <span class="string">"123.png"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在回传前，通过响应头告诉客户端返回的数据类型</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//获取文件类型</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(<span class="string">"/file/"</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"文件类型为："</span> + mimeType);</span><br><span class="line">        resp.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不加则使得文件输出给 Servlet 页面显示出来，而并不是进行下载文件状态</span></span><br><span class="line">        <span class="comment">//还要告诉客户端收到的数据是用于下载使用（还是使用响应头）（即告诉客户端这是用来下载的）</span></span><br><span class="line">        <span class="comment">//Content-Disposition响应头，表示收到的数据如何处理</span></span><br><span class="line">        <span class="comment">//"attachment" 附件的意思，表示下载使用</span></span><br><span class="line">        <span class="comment">//"filename" 表示指定下载的文件名</span></span><br><span class="line"></span><br><span class="line">        resp.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span> + URLEncoder.encode(<span class="string">"哈哈.png"</span>,<span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取要下载的文件内容（通过ServletContext 对象可以获取）</span></span><br><span class="line">        InputStream is = servletContext.getResourceAsStream(<span class="string">"/file/"</span> + name);<span class="comment">//相对路径</span></span><br><span class="line"><span class="comment">//        FileInputStream fileInputStream = new FileInputStream("/file/" + name); //绝对路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把下载的文件内容回传给客户端</span></span><br><span class="line">        OutputStream os = resp.getOutputStream();</span><br><span class="line">        IOUtils.copy(is,os);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若需要编码的是 base64 而并非 URL 的 application/x-www-form-urlencoded 编码格式。</p><p><img src="../../../../img/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/5.png" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>URLEncoder.encode(String str,String s)：str 是 s 编码的，将其 str 转化为 url 所使用的 application/x-www-form-urlencoded 编码格式。</p><p>而 URLEncoder.decode(String str,String s)：将  application/x-www-form-urlencoded 编码格式的 str 解码为 s 编码的格式。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSTL</title>
      <link href="/2020/04/15/JSTL/"/>
      <url>/2020/04/15/JSTL/</url>
      
        <content type="html"><![CDATA[<font size=4><h2 id="JSTL-标签库简介"><a href="#JSTL-标签库简介" class="headerlink" title="$JSTL$ 标签库简介"></a>$JSTL$ 标签库简介</h2><p>$EL$ 是用来代替 $jsp$ 里的表达式脚本，而 $JSTL$ 则是用来代替 $jsp$ 里的代码脚本。</p><p><img src="../../../../img/JSTL/1.png" alt=""></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="set-标签"><a href="#set-标签" class="headerlink" title="$set$ 标签"></a>$set$ 标签</h3><p>&lt;c: set /&gt; 将键值存放到域对象中。</p><p>其中有三个属性：$scope$ 指定域对象，$var$ 表示键，$value$ 表示值。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set scope=<span class="string">"request"</span> <span class="keyword">var</span>=<span class="string">"name"</span> value=<span class="string">"zhangsan"</span>/&gt;</span><br><span class="line">$&#123;requestScope.name&#125;</span><br></pre></td></tr></table></figure><h3 id="if-标签"><a href="#if-标签" class="headerlink" title="$if$ 标签"></a>$if$ 标签</h3><p>&lt;c:if&gt;  &lt;/c:if&gt;</p><p>其中的属性 $test$ 中可以输入判断标准，里面使用 $EL$ 。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;12 == 12&#125;"</span>&gt;</span><br><span class="line">    &lt;h2&gt;12&lt;/h2&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><p>注意：没有 $else  if$ 。</p><h3 id="多路选择标签"><a href="#多路选择标签" class="headerlink" title="多路选择标签"></a>多路选择标签</h3><p>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;</p><p>作用：多路判断，形如 swith…case…default。</p><p> $choose$ 标签开始选择判断</p><p>$when$ 标签表示每一种判断情况</p><p>​            其中的 $test$ 属性表示当前这种判断情况的值</p><p>$otherwise$ 标签</p><p>注意：</p><p>1、标签里不能使用 $html$ 注释。如果需要注释，则使用 $jsp$ 注释。</p><p>2、$when$ 标签的父标签一定要是 $choose$ 标签。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set scope=<span class="string">"request"</span> <span class="keyword">var</span>=<span class="string">"height"</span> value=<span class="number">178</span> /&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;requestScope.height &gt; 180&#125;"</span>&gt;</span><br><span class="line">        &lt;h2&gt;大于180&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;requestScope.height &gt; 170&#125;"</span>&gt;</span><br><span class="line">        &lt;h2&gt;大于170&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;requestScope.height &gt; 160&#125;"</span>&gt;</span><br><span class="line">        &lt;h2&gt;大于160&lt;/h2&gt;</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h3 id="forEach-标签"><a href="#forEach-标签" class="headerlink" title="$forEach$ 标签"></a>$forEach$ 标签</h3><p>&lt;c:forEach&gt;&lt;/c:forEach&gt;</p><p>属性：</p><p>$begin$ 设置开始的索引</p><p>$end$ 设置结束的索引</p><p>$var$ 循坏体的变量</p><p>$item$ 表示遍历的集合</p><p>$step$ 表示遍历的步长值(即 i+= 2 –&gt; step=”2”)</p><p>$varStatus$ 表示当前遍历到的数据的状态 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"i"</span> begin=<span class="string">"1"</span> end=<span class="string">"10"</span>&gt;</span><br><span class="line">    &lt;h2&gt;$&#123;i&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">"arr"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"123"</span>,<span class="string">"456"</span>&#125;);</span><br><span class="line">Map&lt;String,Object&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">m.put(<span class="string">"key1"</span>,<span class="string">"value1"</span>);</span><br><span class="line">m.put(<span class="string">"key2"</span>,<span class="string">"value2"</span>);</span><br><span class="line">m.put(<span class="string">"key3"</span>,<span class="string">"value3"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"m"</span>,m);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;requestScope.arr&#125;"</span> <span class="keyword">var</span>=<span class="string">"x"</span>&gt;</span><br><span class="line">    &lt;h2&gt;$&#123;x&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;requestScope.m&#125;"</span> <span class="keyword">var</span>=<span class="string">"x"</span>&gt;<span class="comment">//遍历 map </span></span><br><span class="line">    &lt;h2&gt;$&#123;x.key&#125;&lt;/h2&gt; </span><br><span class="line">    &lt;h2&gt;$&#123;x.value&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  List&lt;People&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  list.add(<span class="keyword">new</span> People(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="number">12</span>));</span><br><span class="line">  list.add(<span class="keyword">new</span> People(<span class="number">2</span>,<span class="string">"李四"</span>,<span class="number">15</span>));</span><br><span class="line">  list.add(<span class="keyword">new</span> People(<span class="number">3</span>,<span class="string">"王五"</span>,<span class="number">18</span>));</span><br><span class="line">  request.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"x"</span> items=<span class="string">"$&#123;requestScope.list&#125;"</span>&gt;</span><br><span class="line">  $&#123;x.id&#125; $&#123;x.name&#125; $&#123;x.age&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>$varStatus$ 中的几种方法</p><p><img src="../../../../img/JSTL/2.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式</title>
      <link href="/2020/04/14/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/04/14/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<font size=4><h2 id="EL-表达式简介"><a href="#EL-表达式简介" class="headerlink" title="EL 表达式简介"></a>EL 表达式简介</h2><p>可代替 &lt;%=  %&gt; 表达式脚本进行数据的输出。如：${ 123 } 等价于 &lt;%= 123 %&gt;。</p><p>对于域对象：$pageContext$ 、$request$ 、$session$ 、$application$ 中存储的键值，如果 $key$ 相同，则从域对象域的从小到大依次检索。先检查 $pageContext$ 中有没有这个对应的 $value$ ，再搜 $request$ 。当然可以用 $session.key$ 选择性输出。</p><p>EL表达式也可以输出容器中的对象。</p><font size=5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    </span><br><span class="line">People people = <span class="keyword">new</span> People();</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    Map&lt;Long,String&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"123"</span>);</span><br><span class="line">    list.add(<span class="string">"456"</span>);</span><br><span class="line">    m.put(<span class="number">1L</span>,<span class="string">"A"</span>);</span><br><span class="line">    m.put(<span class="number">2L</span>,<span class="string">"B"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"list"</span>,list);<span class="comment">//需要加载到域对象中，因为EL表达式读取的是域对象的内容</span></span><br><span class="line">    request.setAttribute(<span class="string">"m"</span>,m);</span><br><span class="line">    request.setAttribute(<span class="string">"people"</span>,people);</span><br><span class="line">  %&gt;</span><br><span class="line">  $&#123;list.get(<span class="number">0</span>)&#125;</span><br><span class="line">  $&#123;list[<span class="number">0</span>]&#125;</span><br><span class="line">  $&#123;list[<span class="number">1</span>]&#125;</span><br><span class="line">  $&#123;m.get(<span class="number">1</span>)&#125;</span><br><span class="line">  $&#123;m[<span class="number">1</span>]&#125;<span class="comment">//注意，对于 整数类型需要写 Long，不然报错。因为底层会强转为 Long 类型</span></span><br><span class="line">  $&#123;m[<span class="number">2</span>]&#125;</span><br><span class="line">  $&#123;people.a&#125; <span class="comment">//实际是调用了 getA() 方法</span></span><br><span class="line">  $&#123;people.b&#125; <span class="comment">//注意 People 类中一定要写，即便是非 private</span></span><br><span class="line">-------------------------------------------</span><br><span class="line">People.java:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">12</span>;<span class="comment">//即便是非 private 也要写 get 函数</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span></span>&#123;</span><br><span class="line">reuturn a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span></span>&#123;</span><br><span class="line">reuturn b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font><h2 id="EL表达式中-11-个隐含对象"><a href="#EL表达式中-11-个隐含对象" class="headerlink" title="EL表达式中 11 个隐含对象"></a>EL表达式中 11 个隐含对象</h2><table><thead><tr><th align="center">变量</th><th align="center">类型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">$pageContext$</td><td align="center">$PageContextImpl$</td><td align="center">获取 $jsp$ 中的九大内置对象</td></tr><tr><td align="center">$pageScope$</td><td align="center">$Map&lt;String,Object&gt;$</td><td align="center">获取 $pageContext$  域中的数据</td></tr><tr><td align="center">$requestScope$</td><td align="center">$Map&lt;String,Object&gt;$</td><td align="center">获取 $Request$ 域中的数据</td></tr><tr><td align="center">$sessionScope$</td><td align="center">$Map&lt;String,Object&gt;$</td><td align="center">获取 $Session$ 域中的数据</td></tr><tr><td align="center">$applicationScope$</td><td align="center">$Map&lt;String,Object&gt;$</td><td align="center">获取 $ServletContext$ 域中的数据</td></tr><tr><td align="center">$param$</td><td align="center">$Map&lt;String,String&gt;$</td><td align="center">获取请求参数的值</td></tr><tr><td align="center">$paramValues$</td><td align="center">$Map&lt;String,String[]&gt;$</td><td align="center">获取同一个键值下多个$ value$ 值</td></tr><tr><td align="center">$header$</td><td align="center">$Map&lt;String,String&gt;$</td><td align="center">获取请求头信息</td></tr><tr><td align="center">$headerValues$</td><td align="center">$Map&lt;String,String[]&gt;$</td><td align="center">获取请求头信息数组</td></tr><tr><td align="center">$cookie$</td><td align="center">$Map&lt;String,Cookie&gt;$</td><td align="center">获取请求的 $Cookie$ 信息</td></tr><tr><td align="center">$initParam$</td><td align="center">$Map&lt;String,String&gt;$</td><td align="center">获取在 $web.xml$ 中配置的 $<context-param>$ 上下文参数</td></tr></tbody></table><h3 id="四个特定域对象"><a href="#四个特定域对象" class="headerlink" title="四个特定域对象"></a>四个特定域对象</h3><p>1、$pageScope$ —— $pageContext$ 域对象 （$EL$中 —— $jsp$ 中）</p><p>2、$requestScope$ —— $request$ 域对象 （$EL$中 —— $jsp$ 中）</p><p>3、$sessionScope$ —— $session$ 域对象 （$EL$中 —— $jsp$ 中）</p><p>4、$applicationScope$ —— $application$ 域对象 （$EL$中 —— $jsp$ 中）</p><p>可用特定域名$.key$ 获取特定域名中对应的 $value$ 。</p><h3 id="pageContext-获取-jsp-对象"><a href="#pageContext-获取-jsp-对象" class="headerlink" title="$pageContext$ 获取 $jsp$ 对象"></a>$pageContext$ 获取 $jsp$ 对象</h3><p>可通过 $pageContext$  获取 $jsp$ 中的九大对象（$application$ 对应的是 $pageContext.getServletContext$）</p><p>1、获取协议</p><p>&lt;%= request.getScheme() %&gt;</p><p>${pageContext.request.scheme} </p><p>2、获取服务器 $ip$ 地址</p><p>&lt;%= request.getServerName() %&gt;</p><p>${pageConext.request.serverName}</p><p>3、获取服务器端口号</p><p>&lt;%= request.getServerPort() %&gt;</p><p>${pageConext.request.serverPort}</p><p>4、获取工程路径</p><p>&lt;%= request.getContextPath() %&gt;</p><p>${pageContext.request.contextPath}</p><p>5、获取请求方法</p><p>&lt;%= request.getMethod() %&gt;</p><p>${pageContext.request.method}</p><p>6、获取客户端 $ip$ 地址</p><p>&lt;%= request.getRemoteHost() %&gt;</p><p>${pageContext.request.remoteHost}</p><p>7、获取会话的 $id$ 编号：</p><p>&lt;%= session.getId %&gt;</p><p>${pageContext.session.id}</p><p>为了方便，一般会在&lt;% %&gt;中添加一下代码块：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">pageContext.setAttribute(<span class="string">"req"</span>,request);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">$&#123;pageContext.request.scheme&#125; 就可以写成 $&#123;req.scheme&#125;</span><br></pre></td></tr></table></figure><p>这样看上去好像只是将 $request$ 更名为了 $req$ ，但是这个 $request$ 怎么可以代替 $pageContext.request$ 呢？</p><p>要记住，$pageContext$ 在 $jsp$ 语言里（即在 &lt;% %&gt; 中）是一个域对象，可以输出他们的值发现，$jsp$ 和 $EL$ 中的 $pageContext$ 是同个类。但是在 $EL$ 中获取一个类的属性，是调用了 $pageContext$ 的 $getRequest()$ 方法而已。</p><p>所以在 $jsp$ 中的 $request$  $==$ 在 $jsp$ 中的 $pageContext.getRequest()$ $==$ 在 $EL$ 中的$pageContext.request$</p><p>故 $jsp$ 中的 $request$ 等价于 $EL$ 中的 $pageContext.request$。所以上面是可以这样代替的。</p><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p> $EL$只是调用了类的 $get$ 方法获取变量而已，不然需要在 $jsp$ 的方法体中得到变量的话，会需要经常使用&lt;% %&gt;等括起来，然后调用该类的 $get$ 方法才能得到，可读可写性太低，因为需要排版&lt;% %&gt;。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Listener监听器</title>
      <link href="/2020/04/14/Listener%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2020/04/14/Listener%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<font size=4><h2 id="Listener-监听器简介"><a href="#Listener-监听器简介" class="headerlink" title="Listener 监听器简介"></a>Listener 监听器简介</h2><p>1、$Listener$ 监听器它是 $JavaWeb$ 的三大组件之一。 $JavaWeb$ 的三大组件是：$Servlet$ 程序，$Filter$ 过滤器、$Listener$ 监听器。</p><p>2、$Listener$ 它是 $JavaEE$ 的规范，就是接口。</p><p>3、监听器的作用是：监听某种事物的变化，然后拖过回调函数，反馈给客户（程序）去做一些相应的处理。</p><h2 id="ServletContextListener-监听器"><a href="#ServletContextListener-监听器" class="headerlink" title="ServletContextListener 监听器"></a>ServletContextListener 监听器</h2><p>$ServletContextListener$ 它可以监听 $ServletContext$ 对象的创建和销毁。</p><p>$ServletContext$ 对象在 $web$ 工程启动的时候创建，在 $web$ 工程停止的时候销毁。</p><p>监听到创建和销毁之后都会分别调用 $ServletContextListener$ 监听器的方法反馈。</p><p>使用步骤：</p><p>1、创建一个类去实现 $ServletContextListener$ 接口。</p><p>2、重写其中的两个回调方法。</p><p>3、到 $web.xml$ 中去配置监听器。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP</title>
      <link href="/2020/04/13/JSP/"/>
      <url>/2020/04/13/JSP/</url>
      
        <content type="html"><![CDATA[<font size=4><h2 id="JSP-简述"><a href="#JSP-简述" class="headerlink" title="$JSP$ 简述"></a>$JSP$ 简述</h2><p>$jsp$ 页面本质上是一个 $Servlet$ 程序。</p><p>$Servlet$ 程序在处理服务器的回传时，可以将静态的 $html$ 返回给客户端，从而实现客户端能动态地显示 $html$ 页面。</p><p>当第一次访问 $jsp$ 页面时，服务器会将这个 $jsp$ 页面翻译成一个 $java$ 源文件，并对它编码成 $.class$ 字节码文件。这个对应的 $java$ 类会继承于 $HttpServlet$ 类，而且 $jsp$ 中的属性、方法、类等，都会加载到这个类当中，由于这个类继承于 $HttpServlet$ ，所以对于 $jsp$ 中的输出，类中也会加载并且将其翻译成 $html$ 回传给客户端。</p><h2 id="JSP-常用脚本"><a href="#JSP-常用脚本" class="headerlink" title="$JSP$ 常用脚本"></a>$JSP$ 常用脚本</h2><h3 id="声明脚本"><a href="#声明脚本" class="headerlink" title="声明脚本"></a>声明脚本</h3><p>可在 &lt;%!                 %&gt;  中声明对于生成的这个 $java$ 类中的属性、方法、内部类等，可以声明 $private$ 以及 $static$ 。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> map&lt;String,<span class="keyword">int</span>&gt; m;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">    m.put(<span class="string">"key1"</span>,<span class="number">1</span>);</span><br><span class="line">    m.put(<span class="string">"key2"</span>,<span class="number">2</span>);</span><br><span class="line">        m.put(<span class="string">"key3"</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> q;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="表达式脚本"><a href="#表达式脚本" class="headerlink" title="表达式脚本"></a>表达式脚本</h3><p>可在&lt;%!                 %&gt; 声明输出的表达式，可以输出整型、浮点型、字符串以及对象$(toString)$ 。</p><p>1、所有的表达式脚本都被翻译到 $java$ 类中的 _jspService() 方法中。</p><p>2、表达式脚本都会被翻译为 out.print() 回传给服务器，输出到页面上。</p><p>3、由于表达式脚本翻译的内容都在 _jspService() 中，所以 _jspService() 方法中的对象都可以直接使用。</p><p>4、_jspService() 方法中参数含有 $Servlet$ 中一样的 $request$ 以及 $response$ ，可以调用他们的方法。</p><p>5、在表达式脚本中的表达式不能以分号为结束。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=</span><br><span class="line">    <span class="number">1</span>&lt;br&gt;</span><br><span class="line">    <span class="number">2.2</span>&lt;br&gt;</span><br><span class="line">    <span class="string">"Hello"</span>&lt;br&gt;</span><br><span class="line">    m&lt;br&gt;<span class="comment">//对象</span></span><br><span class="line">    </span><br><span class="line">    request.getParameter(<span class="string">"username"</span>)<span class="comment">//正确</span></span><br><span class="line">    request.getParameter(<span class="string">"username"</span>);<span class="comment">//错误</span></span><br><span class="line">    </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h3><p>可在 &lt;%                 %&gt; 中编写 $java$ 语句，里面的代码会直接放到 $java$ 中的 _jspService() 方法，故也可以直接调用 $request$ 以及 $response$ 。</p><p>1、代码脚本翻译之后都在 _jspService() 方法中。</p><p>2、故_jspService() 中的现有对象都可以直接调用。</p><p>3、代码脚本会相连在一起（比如一个 $for$ 循环被分离到两个相邻的代码脚本块中，也能正常运行）</p><p>4、代码脚本中可以使用表达式脚本，以便输出到页面中。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">5</span>)&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; a.length;i++ )&#123;</span><br><span class="line">        &lt;%= a[i] %&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="JSP-中的三种注释"><a href="#JSP-中的三种注释" class="headerlink" title="$JSP$ 中的三种注释"></a>$JSP$ 中的三种注释</h2><h3 id="html-注释"><a href="#html-注释" class="headerlink" title="$html$ 注释"></a>$html$ 注释</h3><p>$html$ 注释会被翻译到 $java$ 源代码中，在 _jspService() 方法里，以 out.writer() 输出到客户端页面中。</p><h3 id="java-注释"><a href="#java-注释" class="headerlink" title="$java$ 注释"></a>$java$ 注释</h3><p>$java$ 注释会被翻译到 $java$ 源代码中，</p><h3 id="jsp-注释"><a href="#jsp-注释" class="headerlink" title="$jsp$ 注释"></a>$jsp$ 注释</h3><p>真正的在 $jsp$ 中注释掉代码。</p><h2 id="JSP-的九大内置对象"><a href="#JSP-的九大内置对象" class="headerlink" title="$JSP$ 的九大内置对象"></a>$JSP$ 的九大内置对象</h2><h3 id="request-—-请求对象"><a href="#request-—-请求对象" class="headerlink" title="$request$ — 请求对象"></a>$request$ — 请求对象</h3><h3 id="response-—-响应对象"><a href="#response-—-响应对象" class="headerlink" title="$response$ — 响应对象"></a>$response$ — 响应对象</h3><h3 id="pageContext-—-jsp-的上下文对象"><a href="#pageContext-—-jsp-的上下文对象" class="headerlink" title="$pageContext$ — $jsp$的上下文对象"></a>$pageContext$ — $jsp$的上下文对象</h3><h3 id="session-—-会话对象"><a href="#session-—-会话对象" class="headerlink" title="$session$ — 会话对象"></a>$session$ — 会话对象</h3><h3 id="application-—-ServletContext-对象"><a href="#application-—-ServletContext-对象" class="headerlink" title="$application$  — $ServletContext$ 对象"></a>$application$  — $ServletContext$ 对象</h3><h3 id="config-—-ServletConfig-对象"><a href="#config-—-ServletConfig-对象" class="headerlink" title="$config$ — $ServletConfig$ 对象"></a>$config$ — $ServletConfig$ 对象</h3><h3 id="out-—-jsp-输出流对象"><a href="#out-—-jsp-输出流对象" class="headerlink" title="$out$ — $jsp$ 输出流对象"></a>$out$ — $jsp$ 输出流对象</h3><h3 id="page-—-指向当前-jsp-的对象"><a href="#page-—-指向当前-jsp-的对象" class="headerlink" title="$page$ — 指向当前 $jsp$ 的对象"></a>$page$ — 指向当前 $jsp$ 的对象</h3><h3 id="exception-—-异常对象"><a href="#exception-—-异常对象" class="headerlink" title="$exception$ — 异常对象"></a>$exception$ — 异常对象</h3><p>（需要添加： $isErrorPage = true）$</p><h2 id="四个域对象"><a href="#四个域对象" class="headerlink" title="四个域对象"></a>四个域对象</h2><h3 id="pageContext-PageContextImpl-类"><a href="#pageContext-PageContextImpl-类" class="headerlink" title="$pageContext$ ($PageContextImpl$ 类)"></a>$pageContext$ ($PageContextImpl$ 类)</h3><p>当前 $jsp$ 页面范围内有效</p><h3 id="request-HttpServletRequest-类"><a href="#request-HttpServletRequest-类" class="headerlink" title="$request$ ($HttpServletRequest$ 类)"></a>$request$ ($HttpServletRequest$ 类)</h3><p>一次请求有效</p><h3 id="session-HttpServletSession-类"><a href="#session-HttpServletSession-类" class="headerlink" title="$session$ ($HttpServletSession$ 类)"></a>$session$ ($HttpServletSession$ 类)</h3><p>一个会话范围内有效（打开浏览器访问服务器，直到关闭浏览器）</p><h3 id="application-ServletContext-类"><a href="#application-ServletContext-类" class="headerlink" title="$application$ ($ServletContext$ 类)"></a>$application$ ($ServletContext$ 类)</h3><p>整个 $web$ 工程范围内都有效，只要 $web$ 工程不停止，数据都在。</p><p>域对象是可以像 $map$  存储键值的对象 (使用 $setAttribute(key,value)$) 。</p><h2 id="out-write-与-response-getWriter-write-区别"><a href="#out-write-与-response-getWriter-write-区别" class="headerlink" title="$out.write()$ 与 $response.getWriter().write()$ 区别"></a>$out.write()$ 与 $response.getWriter().write()$ 区别</h2><p> 一般来讲，呈现在页面中的内容会先是 $response.getWriter().write()$ 输出的内容，再是 $out.write()$ 的内容。</p><p>原因：在编译的时候，会自动执行  $out.flush()$ 操作，使得 $out.write()$ 缓冲区的内容加载到 $response.getWriter().write()$缓冲区的末尾，然后通过 $response$ 回传给页面。</p><p><img src="../../../../img/JSP/1.png" alt=""></p><p>由于 $jsp$ 翻译之后，底层源代码（即对应的 $java$ 类）都是使用 $out.write()$ 来进行输出的。所以在一般情况下，统一使用 $out.write()$ 输出，避免打乱页面内容的顺序。</p><h2 id="out-wirte-与-out-print-区别："><a href="#out-wirte-与-out-print-区别：" class="headerlink" title="$out.wirte()$ 与 $out.print()$ 区别："></a>$out.wirte()$ 与 $out.print()$ 区别：</h2><p>$out.write()$ 输出字符串没有问题。</p><p>$out.print()$ 任何类型都会先转换为 $String$ 字符串类型，再调用 $out.write()$ 输出。</p><h2 id="JSP-三种常用标签"><a href="#JSP-三种常用标签" class="headerlink" title="$JSP$ 三种常用标签"></a>$JSP$ 三种常用标签</h2><h3 id="静态包含"><a href="#静态包含" class="headerlink" title="静态包含"></a>静态包含</h3><p>&lt;%@  include file = “”  %&gt; 在一个页面静态添加一个页面中的内容。如：&lt;%@  include file = “/footer.jsp”  %&gt; 将脚页内容添加到本页面中。</p><p>特点：</p><p>1、静态包含不会翻译被包含的 $jsp$ 页面。</p><p>2、静态包含其实是把被包含的 $jsp$ 页面的代码拷贝到包含的位置上并输出。</p><h3 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h3><p>&lt;jsp:include page=””&gt;&lt;jsp:include&gt; 动态包含。</p><p>动态包含也像静态包含一样，把被包含的内容执行输出到包含位置。</p><p>特点：</p><p>1、动态包含会把被包含的 $jsp$ 页面也翻译成 $java$ 文件。</p><p>2、动态包含底层代码使用如下代码去调用被包含的 $jsp$ 页面执行输出。</p><p>​        JspRuntimeLibrary.include(request , response , “/footer.jsp” , out , false);</p><p>3、当前页面会将 request、response、out 等 传给被包含的 $jsp$ 页面中，使得他们共享同一个 $out$ 缓冲区，从而获得这个完整的页面。</p><p>4、还可通过 &lt;jsp:param key=”” value=””/&gt;  将键值对传入给被包含页面。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"/footer.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">"user"</span> value=<span class="string">"zhangsan"</span>/&gt; </span><br><span class="line">    &lt;jsp:param name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt; </span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><h3 id="转发标签"><a href="#转发标签" class="headerlink" title="转发标签"></a>转发标签</h3><p>&lt;jsp:forward page=””&gt;&lt;/jsp:forword&gt; 请求转发。</p><p>如：&lt;jsp:forward page=”/footer.jsp”&gt;&lt;/jsp:forword&gt;，也是跟上面一样，添加被包含页面。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接远程仓库</title>
      <link href="/2020/04/11/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2020/04/11/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<center><font size=6><b>对本地 git 仓库 与 远程仓库的简单连接以及传输文件</b></font></center><font size=4><p>环境基于 window10 或 linux</p><p>由于连接远程仓库可选的需要 SSH 加密连接，所以必须先在本地电脑（客户端）上生成 SSH 密钥对，然后将私钥保留在本机，将公钥上传到远程仓库（服务器）的密钥管理中。</p><p>此后，在需要传输的文件目录下，使用 git 命令在该文件夹下创建一个本地 git 仓库。之后将需要上传的文件先传入到本地仓库，再通过本地仓库与远程仓库的连接，进而上传文件。</p><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><h3 id="Linux-环境下"><a href="#Linux-环境下" class="headerlink" title="Linux 环境下"></a>Linux 环境下</h3><p>  若为 linux ，则需要确保安装 ssh 服务，ubuntu 为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><h3 id="Window-环境下"><a href="#Window-环境下" class="headerlink" title="Window 环境下"></a>Window 环境下</h3><p>若为 window 环境，则需要安装 gitbash 。<br>云盘下载：<a href="https://www.lanzous.com/ib76nif" target="_blank" rel="noopener" title="https://www.lanzous.com/ib76nif">https://www.lanzous.com/ib76nif</a><br>安装时一直点击 next 安装完成即可。<br>安装完成后，随便点击一个文件目录空白处右键，之后点击 Git Bash Here 。<br><img src="../../../../img/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/1.png" alt=""></p><p>之后这个黑窗口就可以充当 linux 的终端来进行下面的步骤了。</p><hr><h2 id="生成-SSH-密钥对"><a href="#生成-SSH-密钥对" class="headerlink" title="生成 SSH 密钥对"></a>生成 SSH 密钥对</h2><p>一般在用户的根目录下来生成密钥对，则先进入用户根目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;</span><br></pre></td></tr></table></figure><p>之后，可以按照服务器上说明的步骤来生成一个密钥对。</p><p>比如这里华为云仓库建议是 rsa 加密，且还需要用户创建时的邮箱来生成的。当然，不遵从这个格式的密钥对也可以使用。</p><p>在当前目录下生产新密钥对，后面填写自己的邮箱就行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xx.com&quot;</span><br></pre></td></tr></table></figure><p>在生成的过程中，会有三次输入，第一次是确定保存路径，回车即默认在当前目录下（已在根目录下）。后两次是创建对该密钥加密的密码以及确认密码，可以直接回车即默认为空（推荐）。</p><p>之后会在该目录下生成一个 .ssh 隐藏文件夹，可以输入 <code>ls -a</code> 看见此文件夹。</p><p>我们也可以进入到这个文件夹中，然后查看这个文件夹下的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>可以看到，有两个文件，id_rsa 和 id_rsa.pub 。id_rsa 是私钥，一般存放在自己的电脑中，而 id_rsa.pub 是公钥。</p><p>现在我们拥有了密钥对，现在需要将公钥交给服务器，以便登录验证。</p><p>以华为云仓库为例，点击添加 SSH 密钥，我们需要将生成的公钥上传给云仓库。首先需要文本复制公钥。</p><h4 id="window下（在-gitbash-中直接输入命令-或-本地用记事本打开同样能复制）"><a href="#window下（在-gitbash-中直接输入命令-或-本地用记事本打开同样能复制）" class="headerlink" title="window下（在 gitbash 中直接输入命令 或 本地用记事本打开同样能复制）"></a>window下（在 gitbash 中直接输入命令 或 本地用记事本打开同样能复制）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>将文件复制到window剪贴板中，之后在华为云上粘贴密钥。</p><h4 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h4><p>由于 xclip 可能无法使用，故可直接使用 nano、gedit、vi 、vim 来查看文本内容，再进行复制操作。</p><p>例如 vim 下复制到剪贴板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class="line">:ggVG&quot;+y</span><br></pre></td></tr></table></figure><p>此后在华为云粘贴密钥即可。</p><p>这样我们就完成了生成 SSH 密钥的步骤，当我们远程访问仓库时，客户端与服务器的密钥会互相配对，完成端口的登录验证。</p><hr><h2 id="连接云仓库"><a href="#连接云仓库" class="headerlink" title="连接云仓库"></a>连接云仓库</h2><p>若为 linux 环境，则确保安装 git ，ubuntu 为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>我们先在一个文件夹下，创建本地 git 仓库。这个文件夹是可选的，可以先用文件管理器进入该文件夹，然后右键打开 gitbash 或 打开终端。这时 gitbash 或 终端 所在的位置即为当前文件夹。</p><p>或者通过命令创建文件夹，这里创建一个 test 文件夹并进入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir test</span><br><span class="line">cd .&#x2F;test</span><br></pre></td></tr></table></figure><p><img src="../../../../img/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/2.png" alt=""></p><p>在当前文件夹下创建本地 git 仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>.git 也是隐藏文件夹，在任务管理器中显示隐藏文件夹或使用 <code>ls -a</code> 可看见。在下面提交文件到本地仓库的时候，文件即会存放到这个文件夹当中。</p><p>假如我们要把当前文件夹中的一个文件 test.txt 上传到华为云仓库中。</p><p><img src="../../../../img/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/3.png" alt=""></p><p>先要获取这个仓库的 ssh 地址：点击某个华为云仓库，在 “克隆/下载” 那标有该仓库的 ssh 地址。</p><p>之后用 git 命令，在当前本地仓库中，将这个地址起一个 “别名” ，这个别名即对应着该仓库。比如这里的别名为 origin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin xxxxxxxxx</span><br></pre></td></tr></table></figure><p>xxxxxxxxx 表示仓库 ssh 地址。</p><p>回到上面所讲，选择文件 test.txt ，通过 git add 命令将文件先添加到文件暂存区。文件记得要输入全称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add test.txt</span><br></pre></td></tr></table></figure><p>此后通过 git commit  命令将存在于暂存区的文件传入本地仓库中。我们在命令中还需要填写本次 commit 的备注，比如 “test” 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;本次提交的备注&quot;</span><br></pre></td></tr></table></figure><p>此时应该会报错，提示需要告诉本地仓库自己的邮箱和名字是什么。</p><p><img src="../../../../img/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/4.png" alt=""></p><p>所以按照提示，先设置自己的邮箱名以及名字，设置完之后再 <code>git commit</code> 即可。注意空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;名字&quot;</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br><span class="line">git commit -m &quot;test&quot;</span><br></pre></td></tr></table></figure><p><img src="../../../../img/%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/5.png" alt=""></p><p>我们可以看到，一个文件已经成功导入到本地仓库了~</p><p>最后我们还差一步，就是将本地仓库与远程仓库连接，然后同步文件就 OK 了。</p><p>之前我们将 远程仓库 起了个别名，叫 origin 。</p><p>此后，使用 git push 命令，将本地仓库的文件上传到 origin 这个仓库中。这里的 master 是一个仓库的 “分支”，而一般每个仓库被创建后的一个分支叫 master 。相关知识可另搜百度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>这样就相当于将我们本地仓库的 master 分支的文件推送到云仓库的 master 分支上。</p><p>在命令执行期间有一次询问：是匹配到了 ssh 密钥对，按上面步骤这里是成功匹配了，填入 yes 再回车即可。</p><p>之后我们会报错，因为本地仓库与远程仓库是两个独立的仓库，需要整合两个仓库的操作历史，才可以完成上传。</p><p>故需要强行整合两个仓库的内容。之后执行 git push 就 OK了~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>或者强行上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -uf origin master</span><br></pre></td></tr></table></figure><p>之后我们就可以在华为云仓库看到上传的文件了。</p>]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH连接 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
